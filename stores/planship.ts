import { defineStore } from 'pinia'

import { useUserStore } from '@/stores/user'
import { useProjectsStore } from '@/stores/projects'

import { Planship } from '@planship/fetch'

async function getAccessToken() {
  return useFetch('/api/planshipToken').then((response) => {
    return response.data.value
  })
}

function getApiUrl() {
  return typeof window === "undefined" ? useRuntimeConfig().public.serverPlanshipApiUrl : useRuntimeConfig().public.clientPlanshipApiUrl
}

function createServerApiClient() {
  return new Planship('clicker', getApiUrl(), useRuntimeConfig().public.planshipApiClientId , useRuntimeConfig().planshipApiClientSecret)
}

function createBrowserApiClient() {
  return new Planship('clicker', getApiUrl(), getAccessToken)
}

// This class should come autogenerated by Planship (as a snippet to copy/paste?)
export class Entitlements {

  private entitlementsDict: {} = {
    "subscription-button-clicks": 5,
    "max-projects": 1,
    "premium-button": false,
    "analytics-panel": false,
    "project-types": [ "Single" ]
  }


  constructor(entitlementsDict?: {}) {
    if (entitlementsDict)
      this.entitlementsDict = entitlementsDict;
  }

  get subscriptionButtonClicks(): number {
    return this.entitlementsDict['subscription-button-clicks']
  }

  get maxProjects(): number {
    return this.entitlementsDict['max-projects']
  }

  get premiumButton(): boolean {
    return this.entitlementsDict['premium-button']
  }

  get analyticsPanel(): boolean {
    return this.entitlementsDict['analytics-panel']
  }

  get projectTypes(): [] {
    return this.entitlementsDict['project-types']
  }
}

export const usePlanshipStore = defineStore('planship', {
  state: () => ({
    subscriptions: [],
    entitlementsDict: {},
    plans: [],
    clickAnalytics: {},
    apiClient: createServerApiClient(),
  }),

  hydrate(state, initialState) {
    // reacreate the Planship API client one the client side
    state.apiClient = createBrowserApiClient()
  },

  getters: {
    defaultSubscription: (state) => state.subscriptions.length > 0 ? state.subscriptions[0] : undefined,

    entitlements: (state) => new Entitlements(state.entitlementsDict),

    currentPlanSlug: function () {

      return this.defaultSubscription ? this.defaultSubscription.plan.slug : ''
    },

    currentPlanName: function () {
      return this.defaultSubscription ? this.defaultSubscription.plan.name : ''
    },

    canCreateProject: (state) => {
      const projectsStore = useProjectsStore()
      return state.entitlements.maxProjects > projectsStore.projects.length
    },

    canGenerateButtonClick: (state) => {
      return state.entitlements.subscriptionButtonClicks > 0
    },
  },
  actions: {

    async fetchEntitlements(force: boolean = false) {
      if(!force && this.entitlementsDict && Object.keys(this.entitlementsDict).length)
        return
      const userStore = useUserStore()
      this.entitlementsDict = await this.apiClient.getEntitlements(userStore.currentUser.email)
    },

    async fetchSubscriptions(force: boolean = false) {
      if(!force && this.subscriptions && this.subscriptions.length)
        return
      const userStore = useUserStore()
      this.subscriptions = await this.apiClient.listSubscriptions(userStore.currentUser.email)
    },

    async fetchPlans(force: boolean = false) {
      if(!force && this.plans && this.plans.length)
        return

      const plans = await this.apiClient.listPlans()
      this.plans = await Promise.all(plans.map(async ({slug}) => {
        const plan = await this.apiClient.getPlan(slug)
        plan.entitlements.sort((a, b) => (a.order-b.order))
        return plan
      }))
    },

    async fetchClickAnalytics(force: boolean = false) {
      if(!force && this.clickAnalytics && Object.keys(this.clickAnalytics).length)
        return

      const userStore = useUserStore()
      this.clickAnalytics = await this.apiClient.getMeteringIdUsage(userStore.currentUser.email, 'button-click')
    },

    async fetchAll() {
      await this.fetchEntitlements();
      await this.fetchSubscriptions();
      await this.fetchPlans();
      await this.fetchClickAnalytics();
    },

    async modifySubscription(newPlanSlug: string) {
      const userStore = useUserStore()
      await this.apiClient.modifySubscription(userStore.currentUser.email, this.defaultSubscription.subscriptionId, {
        planSlug: newPlanSlug,
        renewPlanSlug: newPlanSlug,
      })
      await this.fetchSubscriptions(true);
      await this.fetchEntitlements(true);
    },

    async reportButtonClicks(count: number, projectName: string) {
      const userStore = useUserStore()
      await this.apiClient.reportUsage(userStore.currentUser.email, 'button-click', count, projectName)
      await this.fetchEntitlements(true);
    },
  },
})
